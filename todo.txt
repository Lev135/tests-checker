TestsParser todo list:

??? Как написать Cond на a[i]?
	- 1 <= a && a <= 10
	- 1 <= a[] && a[] <= 10
	- 1 <= a[i] && a[i] <= 10
	- 1 <= a[$i] && a[$i] <= 10

Предполагаемый порядок ближайших действий:
1) Переделать VarValues в Map VarName (Map [Int] Int)
	- количество индексов во всех вхождениях переменной должно совпадать
	- через это можно сделать проход по всем индексам в условии вида
		1 <= a[i] && a[i] <= 10
2) Унифицировать обработку ошибок:
	- все ошибки оборачиваются в Pos
	- вывод ошибки подчёркивает необходимые строки
3) в Conds цепочки неравенств и перечисления через запятую (см. ниже)

1) проверка ограничений на входные данные
	- простые условия: "arExpr < arExpr <= arExpr ..."
	- сложные условия: &&, ||, ~
2) проверка .tdescr файла на то, что переменные считываются раньше, чем используются
	(сейчас просто фейлится парсер при чекинге .txt файла)
	- также проверка того, что количество индексов переменной во всех вхождениях совпадает
	- проверка того, что идущие друг за другом блоки не будут склеиваться
	  (например, a[1]..a[n] для чисел не подходит, обязательно нужен разделитель)
3) улучшить сообщения об ошибках чекера
	- выводить участок .tdescr и .txt файла
4) добавить в язык:
	- произвольные (строковые) разделители в цикле
	- альтернатива
	- переменные различных типов (Char/..)
	- арифметические выражения вида
		- a[1] + .. + a[n]    // fail, если среди a[i] есть неинициализированные
		- a[1] + .?. + a[n]	  // суммирует только инициализированные
		- аналогично с произведением
	- комментарии
	- в Conds:
		- цепочки неравенств
		- перечисление через запятую
			1 < a, b < 10 	 <=> 	1 < a && a < 10 && 1 < b && b < 10

II Test generation !!!!

III использование доп. функций для генерации/проверки тестов
	
Баг/фича:
	- "n a[1] .. a[n]" не съедает "0", требует "0 "
	